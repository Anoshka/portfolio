name: Netlify Deploy

# Add permissions at the top level
permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

on:
  push:
    branches: ['main', 'staging']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # Test OpenAI API Key
  test-openai:
    runs-on: ubuntu-latest
    steps:
      - name: Test OpenAI API Key
        run: |
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "‚ùå OPENAI_API_KEY is not set"
            exit 1
          else
            echo "‚úÖ OPENAI_API_KEY is set"
            # Print first 4 characters to verify it starts with "sk-"
            echo "Key starts with: ${OPENAI_API_KEY:0:4}"
          fi

  # 1. Prettier Formatting
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: Commit Prettier changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: format code with prettier'
          branch: ${{ github.head_ref }}

  # 2. Testing
  test:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate and Run Tests
        run: |
          # Create output directory
          mkdir -p src/services/generated_tests/output

          # Run test generation
          node -e "
            const { TestRunner } = require('./src/services/generated_tests');
            const runner = new TestRunner(process.env.OPENAI_API_KEY);
            
            // Generate component tests
            runner.runComponentTests('src/components/Animation/Animation.jsx');
            runner.runComponentTests('src/components/Card/Card.jsx');
            
            // Generate route tests
            runner.runRouteTests([
              { path: '/', component: 'LandingPage' },
              { path: '/projects', component: 'ProjectsPage' }
            ]);
          "

          # Run generated tests
          npm test
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Store Test Results
        run: |
          echo "Test Results:" >> $GITHUB_STEP_SUMMARY
          cat test-results.txt >> $GITHUB_STEP_SUMMARY

  # 3. Deploy to Staging
  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Staging
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to staging'
          enable-pull-request-comment: true
          enable-commit-comment: true
          production: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 4. Deploy to Production
  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Production
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to production'
          enable-commit-comment: true
          production: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 5. Post Deploy Notification
  notify:
    needs: deploy-production
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy-production.result }}

            ${process.env.DEPLOY_URL ? `üîó Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
