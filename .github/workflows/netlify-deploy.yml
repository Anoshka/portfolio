name: Netlify Deploy

# Add permissions at the top level
permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # 1. Format Code
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: Commit Prettier changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: format code with prettier'
          branch: ${{ github.head_ref }}

  # 2. Generate Tests
  generate-tests:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev openai glob

      - name: Generate Tests
        run: |
          mkdir -p src/services/generated_tests/output
          node src/services/generated_tests/testRunner.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # Save the generated tests as an artifact
      - name: Upload Generated Tests
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output
          retention-days: 1

  # 3. Run Tests
  test:
    needs: generate-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Remove existing node_modules and package-lock.json to ensure clean install
          rm -rf node_modules package-lock.json

          # Install production dependencies with legacy peer deps
          npm install --legacy-peer-deps

          # Install specific versions of test dependencies
          npm install --save-dev --legacy-peer-deps \
            jest@29.7.0 \
            jest-environment-jsdom@29.7.0 \
            @testing-library/react@14.1.2 \
            @testing-library/jest-dom@6.1.5 \
            @babel/core@7.23.7 \
            @babel/preset-env@7.23.8 \
            @babel/preset-react@7.23.3 \
            babel-jest@29.7.0 \
            identity-obj-proxy@3.0.0 \
            canvas@2.11.2

      - uses: actions/download-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output

      - name: Create test utilities
        run: |
          mkdir -p src/services/generated_tests
          echo 'import React from "react";
          import { MemoryRouter } from "react-router-dom";

          export const TestWrapper = ({ children }) => {
            return (
              <MemoryRouter>
                {children}
              </MemoryRouter>
            );
          };

          export const mockCanvas = () => {
            // Mock canvas and WebGL context for Three.js
            const mockContext = {
              getImageData: jest.fn(),
              putImageData: jest.fn(),
              drawImage: jest.fn(),
              scale: jest.fn(),
              measureText: jest.fn(() => ({ width: 0 })),
              // Add WebGL context methods
              createShader: jest.fn(),
              createProgram: jest.fn(),
              createBuffer: jest.fn(),
              bindBuffer: jest.fn(),
              bufferData: jest.fn(),
              enable: jest.fn(),
              disable: jest.fn(),
              clear: jest.fn(),
              viewport: jest.fn()
            };

            HTMLCanvasElement.prototype.getContext = jest.fn((contextType) => mockContext);
          };' > src/services/generated_tests/testUtils.jsx

      - name: Setup test configuration
        run: |
          # Remove any existing Babel config files
          rm -f .babelrc .babelrc.json

          # Create single .babelrc.json
          echo '{
            "presets": [
              ["@babel/preset-env", {
                "targets": {
                  "node": "current"
                }
              }],
              ["@babel/preset-react", {
                "runtime": "automatic"
              }]
            ]
          }' > .babelrc.json

          # Create Jest config
          echo 'export default {
            testEnvironment: "jsdom",
            moduleNameMapper: {
              "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/__mocks__/fileMock.js",
              "\\.(css|less|scss|sass)$": "identity-obj-proxy"
            },
            setupFilesAfterEnv: ["<rootDir>/src/setupTests.js"],
            transform: {
              "^.+\\.(js|jsx|ts|tsx)$": "babel-jest"
            },
            moduleDirectories: ["node_modules", "src"],
            testMatch: ["**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"],
            moduleFileExtensions: ["js", "jsx", "ts", "tsx", "json", "node"],
            transformIgnorePatterns: [
              "/node_modules/(?!three|@react-three).+\\.js$"
            ],
            testEnvironmentOptions: {
              customExportConditions: ["node", "node-addons"]
            }
          };' > jest.config.mjs

          # Create test setup files
          mkdir -p __mocks__
          echo "export default 'test-file-stub';" > __mocks__/fileMock.js
          echo "import '@testing-library/jest-dom';" > src/setupTests.js
          echo "import React from 'react';" >> src/setupTests.js

      - name: Verify test setup
        run: |
          echo "Test files:"
          ls -la src/services/generated_tests/output/
          echo "Test utils:"
          cat src/services/generated_tests/testUtils.jsx
          echo "Sample test file:"
          cat src/services/generated_tests/output/Card.test.jsx

      - name: Run tests
        run: npm test

  # 4. Deploy
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          production: ${{ github.ref == 'refs/heads/main' }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 5. Post Deploy Notification
  notify:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy.result }}

            ${process.env.DEPLOY_URL ? `üîó Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
