name: Netlify Deploy

# Add permissions at the top level
permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # 1. Format Code
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: Commit Prettier changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: format code with prettier'
          branch: ${{ github.head_ref }}

  # 2. Generate Tests
  generate-tests:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev openai glob

      - name: Generate Tests
        run: |
          mkdir -p src/services/generated_tests/output
          node src/services/generated_tests/testRunner.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # Save the generated tests as an artifact
      - name: Upload Generated Tests
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output
          retention-days: 1

  # 3. Run Tests
  test:
    needs: generate-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom @babel/core @babel/preset-env @babel/preset-react babel-jest identity-obj-proxy

      - uses: actions/download-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output

      - name: Fix test imports
        run: |
          for file in src/services/generated_tests/output/*.test.jsx; do
            if [ -f "$file" ]; then
              # Extract component name from test file name
              component_name=$(basename "$file" .test.jsx)
              
              # Find the actual component file
              component_path=$(find src/components -name "${component_name}.jsx" -o -name "${component_name}/index.jsx")
              
              if [ -n "$component_path" ]; then
                # Calculate relative path from test file to component
                relative_path=$(realpath --relative-to="$(dirname "$file")" "$(dirname "$component_path")")
                
                # Update import statement in test file
                sed -i "s|from '\./${component_name}'|from '${relative_path}/${component_name}'|g" "$file"
              fi
            fi
          done

      - name: Setup test configuration
        run: |
          # Remove any existing Babel config files
          rm -f .babelrc .babelrc.json

          # Create single .babelrc.json
          echo '{
            "presets": [
              ["@babel/preset-env", {
                "targets": {
                  "node": "current"
                },
                "modules": false
              }],
              ["@babel/preset-react", {
                "runtime": "automatic"
              }]
            ]
          }' > .babelrc.json

          # Create test setup files
          mkdir -p __mocks__
          echo "export default 'test-file-stub';" > __mocks__/fileMock.js
          echo "import '@testing-library/jest-dom';" > src/setupTests.js
          echo "import React from 'react';" >> src/setupTests.js

      - name: Verify test setup
        run: |
          echo "Test files:"
          ls -la src/services/generated_tests/output/
          echo "Component files:"
          ls -R src/components/
          echo "Jest config:"
          cat jest.config.mjs
          echo "Babel config:"
          cat .babelrc.json

      - name: Run tests
        run: npm test

  # 4. Deploy
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          production: ${{ github.ref == 'refs/heads/main' }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 5. Post Deploy Notification
  notify:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy.result }}

            ${process.env.DEPLOY_URL ? `üîó Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
