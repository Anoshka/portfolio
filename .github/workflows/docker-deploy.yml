name: CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  NODE_VERSION: "20"

jobs:
  # 1. Initial Checks
  initial-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: |
          npm run prettier:check || (echo "Code formatting failed. Run 'npm run prettier:write' locally" && exit 1)

      - name: Lint code
        run: npm run lint

  # 2. Security Scanning
  security:
    needs: initial-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run npm audit
        run: npm audit

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "portfolio"
          path: "."
          format: "HTML"

      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports

  # 3. Testing
  test:
    needs: security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Run integration tests
        run: npm run test:integration

      - name: Store test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: coverage/

  # 4. Build and Push Docker Image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate build ID
        id: build_id
        run: echo "::set-output name=id::$(date +'%Y%m%d%H%M%S')"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
            ${{ secrets.DOCKER_USERNAME }}/portfolio:${{ steps.build_id.outputs.id }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio:buildcache,mode=max

  # 5. Deploy to Staging
  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
            docker stop portfolio-staging || true
            docker rm portfolio-staging || true
            docker run -d --name portfolio-staging -p 3000:80 ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

  # 6. Deploy to Production
  deploy-production:
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
            docker stop portfolio-prod || true
            docker rm portfolio-prod || true
            docker run -d --name portfolio-prod -p 80:80 ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

  # 7. Post-Deployment Checks
  post-deploy:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    steps:
      - name: Health check staging
        if: github.ref == 'refs/heads/develop'
        run: |
          curl --retry 10 --retry-delay 5 --retry-connrefused http://${{ secrets.STAGING_HOST }}

      - name: Health check production
        if: github.ref == 'refs/heads/main'
        run: |
          curl --retry 10 --retry-delay 5 --retry-connrefused http://${{ secrets.PROD_HOST }}

  # 8. Notifications
  notify:
    needs: post-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
