name: Netlify Deploy

# Add permissions at the top level
permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # 1. Format Code
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: Commit Prettier changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: format code with prettier'
          branch: ${{ github.head_ref }}

  # 2. Generate Tests
  generate-tests:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev openai glob

      - name: Setup test environment
        run: |
          # Create mocks directory
          mkdir -p __mocks__

          # Create file mock
          echo "module.exports = 'test-file-stub';" > __mocks__/fileMock.js

          # Create setup tests file
          mkdir -p src
          echo "import '@testing-library/jest-dom';" > src/setupTests.js

      - name: Generate Tests
        run: |
          mkdir -p src/services/generated_tests/output
          node src/services/generated_tests/testRunner.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # Save the generated tests as an artifact
      - name: Upload Generated Tests
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output
          retention-days: 1

  # 3. Run Tests
  test:
    needs: generate-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          # Remove existing node_modules and package-lock.json to ensure clean install
          rm -rf node_modules package-lock.json

          # Install dependencies with legacy peer deps
          npm install --legacy-peer-deps
          npm install --save-dev --legacy-peer-deps \
            jest@29.7.0 \
            jest-environment-jsdom@29.7.0 \
            @testing-library/react@14.1.2 \
            @testing-library/jest-dom@6.1.5 \
            @babel/core@7.23.7 \
            @babel/preset-env@7.23.8 \
            @babel/preset-react@7.23.3 \
            babel-jest@29.7.0 \
            identity-obj-proxy@3.0.0 \
            canvas@2.11.2

      - uses: actions/download-artifact@v4
        with:
          name: generated-tests
          path: src/services/generated_tests/output

      - name: Create test utilities
        run: |
          mkdir -p src/services/generated_tests
          echo 'import React from "react";
          import { MemoryRouter } from "react-router-dom";

          export const TestWrapper = ({ children }) => {
            return (
              <MemoryRouter>
                {children}
              </MemoryRouter>
            );
          };

          export const mockCanvas = () => {
            const mockContext = {
              getImageData: jest.fn(),
              putImageData: jest.fn(),
              drawImage: jest.fn(),
              scale: jest.fn(),
              measureText: jest.fn(() => ({ width: 0 })),
              createShader: jest.fn(),
              createProgram: jest.fn(),
              createBuffer: jest.fn(),
              bindBuffer: jest.fn(),
              bufferData: jest.fn(),
              enable: jest.fn(),
              disable: jest.fn(),
              clear: jest.fn(),
              viewport: jest.fn()
            };
            HTMLCanvasElement.prototype.getContext = jest.fn(() => mockContext);
          };' > src/services/generated_tests/testUtils.jsx

      - name: Fix test files
        run: |
          for file in src/services/generated_tests/output/*.test.jsx; do
            if [ -f "$file" ]; then
              component_name=$(basename "$file" .test.jsx)
              
              # Determine if it's a page or component
              if [[ "$component_name" == *"Page" ]]; then
                import_path="../../pages/${component_name}/${component_name}"
              else
                import_path="../../components/${component_name}/Card"
              fi

              # Debug output
              echo "Processing test for ${component_name}"
              echo "Looking for component at: src/${import_path}.jsx"

              echo "import React from 'react';
          import { render, screen } from '@testing-library/react';
          import '@testing-library/jest-dom';
          import { TestWrapper, mockCanvas } from '../testUtils';
          import ${component_name} from '${import_path}';

          jest.mock('react-router-dom', () => ({
            ...jest.requireActual('react-router-dom'),
            useNavigate: () => jest.fn(),
          }));

          describe('${component_name}', () => {
            beforeEach(() => {
              if ('${component_name}' === 'Animation') {
                mockCanvas();
              }
            });

            const defaultProps = {
              ...(('${component_name}' === 'Card') && {
                title: 'Test Card',
                image: 'test-image.jpg',
                link: 'https://test.com'
              }),
              ...(('${component_name}' === 'Header') && {
                isOpen: false,
                toggleMenu: jest.fn()
              })
            };

            test('renders without crashing', () => {
              render(
                <TestWrapper>
                  <${component_name} {...defaultProps} />
                </TestWrapper>
              );
            });
          });" > "$file"
            fi
          done

      # Add a step to verify the test files and component locations
      - name: Verify file structure
        run: |
          echo "Test files:"
          ls -R src/services/generated_tests/output/
          echo "Component files:"
          ls -R src/components/
          echo "Page files:"
          ls -R src/pages/

      - name: Run tests
        run: |
          node --experimental-vm-modules node_modules/jest/bin/jest.js \
            --config jest.config.mjs \
            --verbose \
            --detectOpenHandles \
            --forceExit

  # 4. Deploy to Staging
  deploy-staging:
    needs: test
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to staging'
          enable-pull-request-comment: true
          enable-commit-comment: true
          alias: staging
          production: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 5. Deploy to Production
  deploy-production:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to production'
          enable-commit-comment: true
          production: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 6. Notification
  notify:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-staging.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy-staging.result }}

            ${process.env.DEPLOY_URL ? `üîó Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
