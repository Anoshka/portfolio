name: Netlify Deploy

# Add permissions at the top level
permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['main', 'staging']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # 1. Format Code
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx,css,scss,json}"

      - name: Commit Prettier changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: format code with prettier'
          branch: ${{ github.head_ref }}

  # # 2. Generate Tests
  # generate-tests:
  #   needs: format
  #   runs-on: ubuntu-latest
  #   outputs:
  #     test_files_generated: ${{ steps.check_tests.outputs.files_exist }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         npm install --save-dev openai glob

  #     - name: Create test output directory
  #       run: mkdir -p src/services/generated_tests/output

  #     - name: Generate Tests
  #       run: |
  #         node src/services/generated_tests/testRunner.js
  #       env:
  #         OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  #     - name: Check if tests were generated
  #       id: check_tests
  #       run: |
  #         if [ -n "$(ls -A src/services/generated_tests/output/)" ]; then
  #           echo "files_exist=true" >> $GITHUB_OUTPUT
  #           echo "Tests were generated successfully"
  #         else
  #           echo "files_exist=false" >> $GITHUB_OUTPUT
  #           echo "No test files were generated"
  #           exit 1
  #         fi

  #     - name: Upload Generated Tests
  #       if: steps.check_tests.outputs.files_exist == 'true'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: generated-tests
  #         path: src/services/generated_tests/output
  #         retention-days: 1
  #         if-no-files-found: error

  # # 3. Run Tests
  # test:
  #   needs: generate-tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         npm install --save-dev \
  #           jest@29.7.0 \
  #           jest-environment-jsdom@29.7.0 \
  #           @testing-library/react@14.1.2 \
  #           @testing-library/jest-dom@6.1.5 \
  #           @babel/core@7.23.7 \
  #           @babel/preset-env@7.23.8 \
  #           @babel/preset-react@7.23.3 \
  #           babel-jest@29.7.0 \
  #           identity-obj-proxy@3.0.0

  #     - name: Create test directories
  #       run: |
  #         mkdir -p src/services/generated_tests/output
  #         mkdir -p __mocks__

  #     - name: Download Generated Tests
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: generated-tests
  #         path: src/services/generated_tests/output

  #     - name: Verify downloaded tests
  #       run: |
  #         echo "Contents of test directory:"
  #         ls -la src/services/generated_tests/output/
  #         if [ -z "$(ls -A src/services/generated_tests/output/)" ]; then
  #           echo "Error: No test files were downloaded"
  #           exit 1
  #         fi

  #     - name: Create test utilities
  #       run: |
  #         mkdir -p src/services/generated_tests
  #         echo 'import React from "react";
  #         import { MemoryRouter } from "react-router-dom";

  #         export const TestWrapper = ({ children }) => {
  #           return (
  #             <MemoryRouter>
  #               {children}
  #             </MemoryRouter>
  #           );
  #         };

  #         export const mockCanvas = () => {
  #           const mockContext = {
  #             getImageData: jest.fn(),
  #             putImageData: jest.fn(),
  #             drawImage: jest.fn(),
  #             scale: jest.fn(),
  #             measureText: jest.fn(() => ({ width: 0 })),
  #             createShader: jest.fn(),
  #             createProgram: jest.fn(),
  #             createBuffer: jest.fn(),
  #             bindBuffer: jest.fn(),
  #             bufferData: jest.fn(),
  #             enable: jest.fn(),
  #             disable: jest.fn(),
  #             clear: jest.fn(),
  #             viewport: jest.fn()
  #           };
  #           HTMLCanvasElement.prototype.getContext = jest.fn(() => mockContext);
  #         };' > src/services/generated_tests/testUtils.jsx

  #     - name: Fix test files
  #       run: |
  #         for file in src/services/generated_tests/output/*.test.jsx; do
  #           if [ -f "$file" ]; then
  #             component_name=$(basename "$file" .test.jsx)

  #             # Determine if it's a page or component
  #             if [[ "$component_name" == *"Page" ]]; then
  #               import_path="../../pages/${component_name}/${component_name}"
  #             else
  #               import_path="../../components/${component_name}/${component_name}"
  #             fi

  #             # Debug output
  #             echo "Processing test for ${component_name}"
  #             echo "Import path: ${import_path}"

  #             echo "import React from 'react';
  #         import { render, screen } from '@testing-library/react';
  #         import '@testing-library/jest-dom';
  #         import { TestWrapper, mockCanvas } from '../testUtils';
  #         import ${component_name} from '${import_path}';

  #         // Mock react-router-dom before tests
  #         jest.mock('react-router-dom', () => ({
  #           ...jest.requireActual('react-router-dom'),
  #           useNavigate: () => jest.fn(),
  #         }));

  #         describe('${component_name}', () => {
  #           // Setup before tests
  #           beforeAll(() => {
  #             if ('${component_name}' === 'Animation') {
  #               mockCanvas();
  #             }
  #           });

  #           const defaultProps = {
  #             ...(('${component_name}' === 'Card') && {
  #               title: 'Test Card',
  #               image: 'test-image.jpg',
  #               link: 'https://test.com'
  #             }),
  #             ...(('${component_name}' === 'Header') && {
  #               isOpen: false,
  #               toggleMenu: jest.fn()
  #             })
  #           };

  #           it('renders without crashing', () => {
  #             render(
  #               <TestWrapper>
  #                 <${component_name} {...defaultProps} />
  #               </TestWrapper>
  #             );
  #           });
  #         });" > "$file"
  #           fi
  #         done

  #     # Add verification step
  #     - name: List generated test files
  #       run: |
  #         echo "Generated test files:"
  #         cat src/services/generated_tests/output/Footer.test.jsx
  #         echo "Component location check:"
  #         ls -l src/components/Footer/

  #     # Create test setup files
  #     - name: Create test setup files
  #       run: |
  #         # Create setupTests.js with CommonJS syntax
  #         echo 'require("@testing-library/jest-dom");' > src/setupTests.js

  #         # Create .babelrc for proper transpilation
  #         echo '{
  #           "presets": [
  #             ["@babel/preset-env", { "targets": { "node": "current" } }],
  #             ["@babel/preset-react", { "runtime": "automatic" }]
  #           ]
  #         }' > .babelrc

  #     # Update Jest config
  #     - name: Update Jest config
  #       run: |
  #         echo 'export default {
  #           testEnvironment: "jsdom",
  #           moduleNameMapper: {
  #             "\\.(css|less|scss|sass)$": "identity-obj-proxy",
  #             "\\.(jpg|jpeg|png|gif|webp|svg)$": "<rootDir>/__mocks__/fileMock.js"
  #           },
  #           transform: {
  #             "^.+\\.(js|jsx|mjs)$": "babel-jest"
  #           },
  #           setupFilesAfterEnv: ["<rootDir>/src/setupTests.js"],
  #           testMatch: ["**/generated_tests/output/**/*.test.jsx"],
  #           moduleDirectories: ["node_modules", "src"],
  #           extensionsToTreatAsEsm: [".jsx"],
  #           transformIgnorePatterns: [
  #             "/node_modules/(?!(@testing-library|react-router-dom)/)"
  #           ]
  #         }' > jest.config.mjs

  #     # Run tests
  #     - name: Run tests
  #       run: |
  #         node --experimental-vm-modules node_modules/jest/bin/jest.js \
  #           --config=jest.config.mjs \
  #           --runInBand \
  #           --detectOpenHandles \
  #           --forceExit \
  #           --testTimeout 15000 \
  #           --verbose

  # 4. Deploy to Staging
  deploy-staging:
    # needs: test
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to staging'
          enable-pull-request-comment: true
          enable-commit-comment: true
          alias: staging
          production: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 5. Deploy to Production
  deploy-production:
    # needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy to production'
          enable-commit-comment: true
          production: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 6. Notification
  notify:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: 
        #   if [ "${{ needs.deploy-staging.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "success" ]; then
        #     echo "🎉 Deployment successful!"
        #   else
        #     echo "❌ Deployment failed"
        #     exit 1
        #   fi
        echo "🎉 Deployment successful!"

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy-staging.result }}

            ${process.env.DEPLOY_URL ? `🔗 Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
