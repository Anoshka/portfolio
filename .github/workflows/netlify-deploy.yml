name: Netlify CI/CD Pipeline

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  NODE_VERSION: '20'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

jobs:
  # 1. Lint Check and Review
  lint-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint Check
        id: lint
        run: |
          OUTPUT=$(npm run lint 2>&1) || true
          ESCAPED_OUTPUT=$(echo "$OUTPUT" | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "LINT_ISSUES=$ESCAPED_OUTPUT" >> $GITHUB_ENV

      - name: Create Pull Request with Lint Fixes
        if: env.LINT_ISSUES != ''
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'style: ESLint Auto-fixes'
          body: |
            ESLint has suggested the following changes:
            ```
            ${{ env.LINT_ISSUES }}
            ```

            - Review the changes and approve/reject them
            - Approving this PR will apply the fixes and continue deployment
            - Closing this PR will continue deployment without the fixes
          branch: lint-fixes-${{ github.sha }}
          base: main # Explicitly set the base branch
          delete-branch: true
          labels: |
            linting
            automated pr

  # 2. Build and Deploy
  deploy:
    needs: lint-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: |
          npm run build
          cp netlify.toml dist/

      # Deploy to Netlify
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
          alias: deploy-preview-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # 3. Post Deploy Notification
  notify:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `
            ## Deployment Status: ${{ needs.deploy.result }}

            ${process.env.DEPLOY_URL ? `üîó Preview URL: ${process.env.DEPLOY_URL}` : ''}

            ### Build Details
            - Branch: ${context.payload.pull_request.head.ref}
            - Commit: ${context.sha}
            - Triggered by: ${context.actor}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
